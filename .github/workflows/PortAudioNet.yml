name: PortAudio.NET
on:
  push:
    # This prevents tag pushes from triggering this workflow
    branches: ['**']
  pull_request:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      publish-docs-website:
        description: "Publish docs website to GitHub Pages?"
        default: "false"
env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  ContinuousIntegrationBuild: true
jobs:
  # =====================================================================================================================================================================
  # Build and package
  # =====================================================================================================================================================================
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Windows x64
            os: windows-latest
            rid: win-x64
            native-build-command: ./src/PortAudioNet.Native/build-native.cmd
            generate-command: ./generate.cmd
            collect-packages: true
          - name: Linux x64
            os: ubuntu-22.04
            rid: linux-x64
            native-build-command: ./src/PortAudioNet.Native/build-native.sh
            generate-command: ./generate.sh
    name: ${{matrix.name}}
    runs-on: ${{matrix.os}}
    steps:
      # ----------------------------------------------------------------------- Checkout
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # ----------------------------------------------------------------------- Setup tools
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x

      # Workaround for https://github.com/MochiLibraries/Biohazrd/issues/248
      - name: Install libtinfo5
        if: matrix.rid == 'linux-x64'
        run: |
          sudo apt-get update
          sudo apt-get install libtinfo5 -y

      # ----------------------------------------------------------------------- Configure build
      - name: Configure build
        id: configure-build
        uses: bonsai-rx/configure-build@v1

      # ----------------------------------------------------------------------- Populate PortAudio Git revision
      - name: Populate PortAudio Git revision
        shell: bash
        working-directory: src/external/portaudio/
        run: ./update_gitrevision.sh

      # ----------------------------------------------------------------------- Build native library
      - name: Build native library
        run: ${{matrix.native-build-command}}

      # ----------------------------------------------------------------------- Generate PortAudioNet
      - name: Restore PortAudioNet.Generator
        run: dotnet restore src/PortAudioNet.Generator

      - name: Build PortAudioNet.Generator
        run: dotnet build src/PortAudioNet.Generator --configuration Release

      - name: Generate PortAudioNet
        id: generate
        run: ${{matrix.generate-command}}

      # Currently the generated output for Windows is comitted to the repository, so we don't expect changes
      - name: Ensure the generated output did not change on Windows
        if: matrix.rid == 'win-x64'
        run: git diff --exit-code --ignore-submodules=all

      # ----------------------------------------------------------------------- Build PortAudioNet
      - name: Restore PortAudioNet
        # This is a workaround for the fact that the NuGet package name of PortAudioNet.Native changes depending on the configuration.
        # Ideally we'd just manually specify the dependency but NuGet makes that really annoying to do. See https://github.com/NuGet/Home/issues/8133
        env:
          Configuration: Release
        run: dotnet restore src/PortAudioNet

      - name: Build PortAudioNet
        run: dotnet build src/PortAudioNet --no-restore --configuration Release

      # ----------------------------------------------------------------------- Pack PortAudioNet
      - name: Pack PortAudioNet
        id: pack
        run: dotnet pack src/PortAudioNet --no-build --configuration Release

      # ----------------------------------------------------------------------- Pack PortAudioNet.Native variants
      - name: Restore PortAudioNet
        run: dotnet restore src/PortAudioNet.Native --runtime ${{matrix.rid}}

      - name: Pack PortAudioNet.Native.${{matrix.rid}}-debug
        run: dotnet pack src/PortAudioNet.Native --no-build --configuration Debug /p:RuntimeIdentifier=${{matrix.rid}}
      - name: Pack PortAudioNet.Native.${{matrix.rid}}
        run: dotnet pack src/PortAudioNet.Native --no-build --configuration Release /p:RuntimeIdentifier=${{matrix.rid}}

      # ----------------------------------------------------------------------- Run device listing sample as a smoke test
      # We do this last so it can't indirectly affect the build process of any packages
      - name: Smoke test modern .NET (Debug)
        if: ${{matrix.rid != 'linux-x64'}}
        run: dotnet run --project src/Samples/ListDevices --framework net8.0 --configuration Debug
      - name: Smoke test modern .NET (Release)
        if: ${{matrix.rid != 'linux-x64'}}
        run: dotnet run --project src/Samples/ListDevices --framework net8.0 --configuration Release
      - name: Smoke test .NET Framework (Debug)
        if: matrix.rid == 'win-x64'
        run: dotnet run --project src/Samples/ListDevices --framework net472 --configuration Debug
      - name: Smoke test .NET Framework (Release)
        if: matrix.rid == 'win-x64'
        run: dotnet run --project src/Samples/ListDevices --framework net472 --configuration Release

      # ----------------------------------------------------------------------- Ensure everything else builds
      # This mainly exists to ensure all samples build
      - name: Ensure everything else builds (Debug)
        if: ${{matrix.rid != 'linux-x64'}}
        run: dotnet build --configuration Debug
      - name: Ensure everything else builds (Release)
        if: ${{matrix.rid != 'linux-x64'}}
        run: dotnet build --configuration Release

      # ----------------------------------------------------------------------- Collect artifacts
      # All of these steps ignore failure so that we get what artifacts are available when things are broken
      - name: Collect NuGet packages
        uses: actions/upload-artifact@v4
        if: matrix.collect-packages && steps.pack.outcome == 'success' && always()
        with:
          name: Packages-${{matrix.rid}}
          if-no-files-found: error
          path: artifacts/package/Release/**

      - name: Collect generated output
        uses: actions/upload-artifact@v4
        if: steps.generate.outcome == 'success' && always()
        with:
          name: Generated-${{matrix.rid}}
          if-no-files-found: error
          path: src/PortAudioNet/#Generated/**

  # =====================================================================================================================================================================
  # Build documentation
  # =====================================================================================================================================================================
  build-documentation:
    name: Build documentation
    runs-on: ubuntu-latest
    steps:
      # ----------------------------------------------------------------------- Checkout
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # ----------------------------------------------------------------------- Set up tools
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x

      - name: Set up .NET tools
        run: dotnet tool restore

      # ----------------------------------------------------------------------- Restore
      - name: Restore
        run: dotnet restore

      # ----------------------------------------------------------------------- Build metadata
      - name: Build metadata
        id: build-metadata
        run: dotnet docfx metadata docs/docfx.json --noRestore

      # ----------------------------------------------------------------------- Build documentation
      - name: Build documentation
        id: build-documentation
        run: dotnet docfx build docs/docfx.json

      # ----------------------------------------------------------------------- Collect artifacts
      - name: Collect documentation metadata
        uses: actions/upload-artifact@v4
        if: steps.build-metadata.outcome == 'success' && always()
        with:
          name: DocumentationMetadata
          if-no-files-found: error
          path: artifacts/docs/api/

      - name: Collect documentation artifact
        uses: actions/upload-artifact@v4
        if: steps.build-documentation.outcome == 'success' && always()
        with:
          name: DocumentationWebsite
          if-no-files-found: error
          path: artifacts/docs/site/

  # =====================================================================================================================================================================
  # Publish NuGet Packages to GitHub
  # =====================================================================================================================================================================
  publish-github:
    name: Publish packages to GitHub
    runs-on: ubuntu-latest
    needs: build
    permissions:
      # Needed to attach files to releases
      contents: write
      # Needed to upload to GitHub Packages
      packages: write
    if: github.event_name == 'push' || github.event_name == 'release'
    steps:
      # ----------------------------------------------------------------------- Set up .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x

      # ----------------------------------------------------------------------- Download built packages
      - name: Download built packages
        uses: actions/download-artifact@v4
        with:
          name: Packages-win-x64
          path: artifacts/packages/

      # ----------------------------------------------------------------------- Upload release assets
      - name: Upload release assets
        if: github.event_name == 'release'
        run: gh release upload --repo ${{github.repository}} ${{github.event.release.tag_name}} artifacts/packages/* --clobber
        env:
          GH_TOKEN: ${{github.token}}

      # ----------------------------------------------------------------------- Push to GitHub Packages
      - name: Push to GitHub Packages
        run: dotnet nuget push "artifacts/packages/*.nupkg" --skip-duplicate --no-symbols --api-key ${{secrets.GITHUB_TOKEN}} --source https://nuget.pkg.github.com/${{github.repository_owner}}
        env:
          # This is a workaround for https://github.com/NuGet/Home/issues/9775
          DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER: 0

  # =====================================================================================================================================================================
  # Publish NuGet Packages to NuGet.org
  # =====================================================================================================================================================================
  publish-packages-nuget-org:
    name: Publish packages to NuGet.org
    runs-on: ubuntu-latest
    environment: public-release
    needs: build
    if: github.event_name == 'release'
    steps:
      # ----------------------------------------------------------------------- Set up .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x

      # ----------------------------------------------------------------------- Download built packages
      - name: Download built packages
        uses: actions/download-artifact@v4
        with:
          name: Packages-win-x64
          path: artifacts/packages/

      # ----------------------------------------------------------------------- Push to NuGet.org
      - name: Push to NuGet.org
        run: dotnet nuget push "artifacts/packages/*.nupkg" --api-key ${{secrets.NUGET_API_KEY}} --source ${{vars.NUGET_API_URL}}
        env:
          # This is a workaround for https://github.com/NuGet/Home/issues/9775
          DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER: 0

  # =====================================================================================================================================================================
  # Publish documentation
  # =====================================================================================================================================================================
  publish-documentation:
    name: Publish documentation
    runs-on: ubuntu-latest
    # Publishing is not strictly necessary here, but if we're going to do a public release we want to wait to publish the docs until it goes out
    needs: [build-documentation, publish-packages-nuget-org]
    permissions:
      # Both required by actions/deploy-pages
      pages: write
      id-token: write
    environment:
      # Intentionally not using the "default" github-pages environment as it's not compatible with this workflow
      name: documentation-website
      url: ${{steps.publish.outputs.page_url}}
    # Only run if the workflow isn't dying and build-documentation was successful and either A) we're releasing or B) we have continuous deployment enabled
    if: |
      !cancelled() && !failure() && needs.build-documentation.result == 'success'
      && (github.event_name == 'release'
      || (github.event_name == 'workflow_dispatch' && github.event.inputs.publish-docs-website == 'true')
      || (github.event_name == 'push' && vars.CONTINUOUS_DOCUMENTATION)
      )
    steps:
      # ----------------------------------------------------------------------- Download documentation website components
      # It is intentional that we use two independent download steps here as it ensures that workflow images are permitted
      # to overwrite any conflicts in the docfx output but not the other way around.
      - name: Download documentation website
        uses: actions/download-artifact@v4
        with:
          name: DocumentationWebsite

      # ----------------------------------------------------------------------- Collect artifacts
      - name: Upload final documentation website artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      # ----------------------------------------------------------------------- Publish to GitHub Pages
      - name: Publish to GitHub Pages
        id: publish
        uses: actions/deploy-pages@v4