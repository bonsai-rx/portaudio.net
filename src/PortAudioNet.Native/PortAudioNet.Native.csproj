<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <RuntimeIdentifier Condition="'$(RuntimeIdentifier)' == ''">$(NETCoreSdkPortableRuntimeIdentifier)</RuntimeIdentifier>

    <_NativeFileName Condition="$(RuntimeIdentifier.StartsWith('win-'))">portaudio.dll</_NativeFileName>
    <_NativePdbName Condition="$(RuntimeIdentifier.StartsWith('win-')) and '$(Configuration)' != 'Release'">portaudio.pdb</_NativePdbName>
    <_NativeFileName Condition="$(RuntimeIdentifier.StartsWith('linux-'))">libportaudio.so</_NativeFileName>

    <_NativeOutputDirectory Condition="$(RuntimeIdentifier.StartsWith('win-'))">$(MSBuildThisFileDirectory)../../artifacts/obj/PortAudioNet.Native/cmake/$(RuntimeIdentifier)/$(Configuration)/</_NativeOutputDirectory>
    <_NativeOutputDirectory Condition="$(RuntimeIdentifier.StartsWith('linux-'))">$(MSBuildThisFileDirectory)../../artifacts/obj/PortAudioNet.Native/cmake/$(RuntimeIdentifier)-$(Configuration)/</_NativeOutputDirectory>

    <_NativeFilePath Condition="'$(_NativeFileName)' != ''">$(_NativeOutputDirectory)$(_NativeFileName)</_NativeFilePath>
    <_NativePdbPath Condition="'$(_NativePdbName)' != ''">$(_NativeOutputDirectory)$(_NativePdbName)</_NativePdbPath>

    <_RuntimesPackagePathPrefix>runtimes/$(RuntimeIdentifier)/native/</_RuntimesPackagePathPrefix>
    <_RuntimesPackagePathPrefix Condition="'$(Configuration)' != 'Release'">$(_RuntimesPackagePathPrefix)$(Configuration)/</_RuntimesPackagePathPrefix>
    <_NativeFilePackagePath Condition="'$(_NativeFileName)' != ''">$(_RuntimesPackagePathPrefix)$(_NativeFileName)</_NativeFilePackagePath>
    <_NativePdbPackagePath Condition="'$(_NativePdbName)' != ''">$(_RuntimesPackagePathPrefix)$(_NativePdbName)</_NativePdbPackagePath>

    <_NativeRepoPath>$(MSBuildThisFileDirectory)../external/portaudio/</_NativeRepoPath>
    <_NativeLicenseFilePath>$(_NativeRepoPath)LICENSE.txt</_NativeLicenseFilePath>

    <!-- ==============================================================================================================
    Package Info
    =============================================================================================================== -->
    <IsPackable>true</IsPackable>

    <!--
      The package ID includes both the runtime identifier *and* the variant
      It was considered having the variant be part of the version, but having it be part of the package ID means that it's possible to reference multiple variants and select between them at runtime.
      Additionally, NuGet Restore runs in a context that doesn't have things like the active configuration so it would be wonky to switch between variants at compile time.
    -->
    <PackageId>$(MSBuildProjectName).$(RuntimeIdentifier)</PackageId>
    <PackageId Condition="'$(Configuration)' != 'Release'">$(PackageId)-$(Configuration.ToLowerInvariant())</PackageId>

    <Description>Native runtime support package for PortAudioNet on $(RuntimeIdentifier)</Description>
    <Description Condition="'$(Configuration)' != 'Release'">$(Description) ($(Configuration) variant)</Description>

    <!-- Apply native library's license and copyright info since the meat of this package is just the wrapped native bits -->
    <PackageLicenseExpression></PackageLicenseExpression>
    <PackageLicenseFile>LICENSE.txt</PackageLicenseFile>
    <Authors>Ross Bencina, Phil Burk, and Contributors</Authors>
    <Copyright>Copyright (c) 1999-2006 Ross Bencina, Phil Burk, and Contributors</Copyright>

    <!-- This package is only for the native runtime, don't try to build/pack the .NET assembly or specify a framework dependency -->
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>
    <!--
    Ideally we would do this and use ReferenceOutputAssembly="false" in wrapper project, but that doesn't play nice with the NuGet pack task.
    https://github.com/NuGet/Home/issues/8133 would let us do this the way we want.
    The assembly is renamed to avoid conflicting with the native DLL.
    The PlatformTarget is fixed for the same reasons as in the wrapper project.
    <CopyBuildOutputToOutputDirectory>false</CopyBuildOutputToOutputDirectory>
    -->
    <AssemblyName>$(MSBuildProjectName).DummyAssembly</AssemblyName>
    <PlatformTarget Condition="'$(PlatformTarget)' == ''">$(Platform)</PlatformTarget>
    <CopyOutputSymbolsToOutputDirectory>false</CopyOutputSymbolsToOutputDirectory>

    <!-- Symbol packages only work with portable PDBs, which are .NET-only -->
    <IncludeSymbols>false</IncludeSymbols>
  </PropertyGroup>
  <ItemGroup>
    <!-- Remove the managed license and replace it with the native one -->
    <None Remove="$(MSBuildThisFileDirectory)../../LICENSE.md" />
    <None Include="$(_NativeLicenseFilePath)" Pack="true" PackagePath="" />

    <!-- Include source files just so they're visible in Visual Studio -->
    <None Include="$(_NativeRepoPath)src/**/*.c" />
    <None Include="$(_NativeRepoPath)src/**/*.cpp" />
    <None Include="$(_NativeRepoPath)include/*.h" />

    <!-- Copy native runtime to output directory and pack it -->
    <None Include="$(_NativeFilePath)" Link="$(_NativeFileName)" Condition="'$(_NativeFilePath)' != ''">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Pack>true</Pack>
      <PackagePath>$(_NativeFilePackagePath)</PackagePath>
    </None>
    <None Include="$(_NativePdbPath)" Link="$(_NativePdbName)" Condition="'$(_NativePdbPath)' != ''">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Pack>true</Pack>
      <PackagePath>$(_NativePdbPackagePath)</PackagePath>
    </None>
  </ItemGroup>

  <!--
  Note: We don't bother with any incremental building logic here because the generator will rebuild the native component during genereration.
  It isn't valid to change the native component without re-running the generator, so it's not worth trying to handle that case.
  This is only really meant to cover building the native component on a fresh clone.
  -->
  <Target Name="_BuildNative" BeforeTargets="GetCopyToOutputDirectoryItems;Build;GenerateNuspec;Pack;_NativeRuntimeChecks" Condition="!Exists('$(_NativeFilePath)')">
    <Message Importance="High" Text="Building $(_NativeFileName)..." />
    <Exec Command="build-native.cmd" Condition="$(RuntimeIdentifier.StartsWith('win-'))" />
    <Exec Command="build-native.sh" Condition="$(RuntimeIdentifier.StartsWith('linux-'))" />
    <Error Condition="!Exists('$(_NativeFilePath)')" Text="Failed to build $(_NativeFileName)" />
  </Target>

  <!-- Error if required assets are missing -->
  <Target Name="_NativeRuntimeChecks" BeforeTargets="GetCopyToOutputDirectoryItems;Build;GenerateNuspec;Pack">
    <Error Text="Native library license file is missing, ensure Git submodules are up-to-date." Condition="!Exists('$(_NativeLicenseFilePath)')" />
    <Error Text="Could not automatically determine the native runtime to use based on runtime identifier '$(RuntimeIdentifier)'" Condition="'$(_NativeFileName)' == ''" />
    <Error Text="Could not locate native runtime for '$(RuntimeIdentifier)' at '$(_NativeFilePath)', did you run build-native.cmd/sh?" Condition="!Exists('$(_NativeFilePath)')" />
    <Error Text="Could not locate native runtime PDB for '$(RuntimeIdentifier)' at '$(_NativePdbPath)', did you run build-native.cmd/sh?" Condition="'$(_NativePdbName)' != '' and !Exists('$(_NativePdbPath)')" />
  </Target>
</Project>
